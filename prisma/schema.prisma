datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  SUPER_ADMIN
  ADMIN
  CUSTOMER
  VIEWER
}

model User {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String   @unique
  password       String
  avatar         String?
  phone          String?
  role           Role     @default(CUSTOMER)
  address        Address?
  orders         Order[]
  productReviews Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user")
}

model Review {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  message String
  rating  Float  @default(0)

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId

  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("review")
}

model Address {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  street   String
  postCode String
  city     String
  country  String
  userId   String @unique @db.ObjectId
  user     User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("address")
}

model Order {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  userId     String?          @db.ObjectId
  totalPrice Int
  products   OrderedProduct[]
  user       User?            @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order")
}

model OrderedProduct {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  productId String  @db.ObjectId
  name      String
  price     Float
  quantity  Int
  orderId   String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  order     Order?  @relation(fields: [orderId], references: [id])

  @@map("ordered-product")
}

model Cuppon {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  code       String   @unique
  discount   Float
  expiryDate DateTime
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("cuppon")
}

model Product {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String   @unique
  description      String
  price            Float
  regularPrice     Float
  inStock          Int
  photo            String
  isDeleted        Boolean  @default(false)
  rating           Float    @default(0)
  brand            String
  processor_type   String
  processor_model  String
  generation       String
  display          String
  display_size     String
  display_type     String
  ram              String
  ram_type         String
  hdd              String
  ssd              String
  graphics         String
  operating_system String
  slug             String   @unique
  features         String[]

  reviews         Review[]
  offeredProduct  HotOffers[]
  featuredProduct FeaturedProduct[]
  orderedProduct  OrderedProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product")
}

model HotOffers {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  discount Float
  price    Float  @default(0)
  endDate  String

  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("hot-offer")
}

model FeaturedProduct {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("featured-product")
}

type address {
  phone   String
  street  String
  city    String
  country String
}
