datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  SUPER_ADMIN
  ADMIN
  CUSTOMER
  VIEWER
}

model User {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String   @unique
  password       String
  avatar         String?
  role           Role     @default(CUSTOMER)
  address        Address?
  orders         Order[]
  productReviews Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  message String
  rating  Float  @default(0)

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId

  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  phone   String
  street  String
  city    String
  country String

  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  userId          String?          @db.ObjectId
  vat             Float
  shippingCost    Float
  totalPrice      Float
  shippingAddress address
  user            User?            @relation(fields: [userId], references: [id])
  products        OrderedProduct[]
  payment         Payment?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderedProduct {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  productId String  @db.ObjectId
  price     Int
  quantity  Int
  orderId   String? @unique @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  order     Order?  @relation(fields: [orderId], references: [id])
}

model Payment {
  id     String        @id @default(auto()) @map("_id") @db.ObjectId
  status PaymentStatus @default(PENDING)
  method PaymentMethod @default(ONLINE)

  orderId String @unique @db.ObjectId
  order   Order  @relation(fields: [orderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cuppon {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  code       String   @unique
  discount   Float
  expiryDate DateTime
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Product {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  description      String
  price            Float
  regularPrice     Float
  inStock          Int
  isDeleted        Boolean  @default(false)
  rating           Float    @default(0)
  reviews          Review[]
  brand            Brand?   @relation(fields: [brandId], references: [id])
  brandId          String?  @db.ObjectId
  processor_type   String
  processor_model  String
  generation       String
  display_size     String
  display_type     String
  ram              String
  ram_type         String
  hdd              String
  ssd              String
  graphics         String
  operating_system String
  features         String[]

  slug            String            @default("")
  offeredProduct  OfferedProduct[]
  featuredProduct FeaturedProduct[]
  orderedProduct  OrderedProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OfferedProduct {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  discount  Float
  startDate String
  endDate   String

  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FeaturedProduct {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String    @unique
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

type address {
  phone   String
  street  String
  city    String
  country String
}

enum PaymentStatus {
  PENDING
  ONWAY
  DELIVERED
}

enum PaymentMethod {
  ONLINE
  CASH
}
